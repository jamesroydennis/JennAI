# =============================================================================
# SYSTEM REQUIREMENTS (manual install, not managed by conda/pip):
#
# NOTE: The `full_reset.bat` script can automate much of the Python environment
#       setup, but the external tools below must be installed manually first.
#
# - Allure CLI is required for report serving:
#     scoop install allure      # (Recommended on Windows)
#     choco install allure      # (Alternative on Windows)
#     brew install allure       # (macOS)
#     sudo apt install allure   # (Linux, if available)
#     # NOTE: Do NOT add 'allure-cmd' to requirements.txt or environment.yaml.
#     #       The Allure CLI is NOT a Python/pip package.
#
# - Java (required for Allure CLI):
#     scoop bucket add java     # (Required before installing openjdk with Scoop)
#     scoop install openjdk     # (Recommended on Windows)
#     choco install openjdk     # (Alternative on Windows)
#
# - eza (for tree view):
#     scoop install eza         # (Windows)
#     brew install eza          # (macOS)
#     sudo apt install eza      # (Linux, if available)
#
# - Node.js Version Management (REQUIRED for frontend tooling):
#     nvm (Node Version Manager) is the preferred method for installing and managing Node.js versions.
#     - nvm for Windows: https://github.com/coreybutler/nvm-windows
#     - nvm for macOS/Linux: https://github.com/nvm-sh/nvm
#     # NOTE: Do NOT use conda to manage Node.js for this project.
#     #       Always use nvm for installing and switching Node.js versions.
#
# - Node.js (required for Sass CLI and other frontend tooling):
#     # After installing nvm, install Node.js using nvm:
#     nvm install lts
#     nvm use lts
#     node --version
#     npm --version
#
# - Sass CLI (for SCSS compilation):
#   This project uses the Dart Sass command-line tool to compile .scss files into .css.
#   The recommended approach is to install it as a local project dependency using npm.
#   This ensures the project is self-contained and avoids system PATH issues.
#
#   1. Initialize a package.json (if you don't have one) and install Sass locally:
#      # Run this from the project root directory (C:\Users\jarde\Projects\JennAI)
#      npm install sass --save-dev
#
#   2. How to use it in scripts:
#      Use `npx` to run the locally installed Sass. `npx` is a tool included with npm
#      that automatically finds and executes the command from your local `node_modules` folder.
#      Example command in a script (like admin/42.py):
#          npx sass --watch path/to/input.scss:path/to/output.css
#
# - Python Sass (for programmatic SCSS compilation, NOT for command-line use):
#     conda install -c conda-forge sass
#     # This installs the 'python-sass' package, which allows you to compile SCSS from within Python code.
#     # It does NOT provide the 'sass' command-line tool for frontend workflows.
#     # Only use this if you need to compile SCSS in Python scripts or Flask extensions.
#     # For most frontend development, use the Dart Sass CLI via npm (see above).
# =============================================================================

name: lily-presents
channels:
  - pytorch
  - nvidia
  - conda-forge
  - defaults

dependencies:
  - python=3.9
  - cudatoolkit=11.8
  - cudnn=8.9.7
  - pytorch
  - torchvision
  - torchaudio
  - pytorch-cuda=11.8
  - flask
  - flask-cors
  - flask-assets
  - numpy
  - pandas
  - requests
  - matplotlib
  - jupyter
  - markdown
  - pyyaml  # Required for the dynamic conda_update.py script
  - pip
  - inquirerpy>=0.3.4
  - pip:
      - -r requirements.txt